"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/[locale]/backoffice/(default)/welcome-login/page",{

/***/ "(app-pages-browser)/./services/userService.ts":
/*!*********************************!*\
  !*** ./services/userService.ts ***!
  \*********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   logOutUser: function() { return /* binding */ logOutUser; },\n/* harmony export */   loginUser: function() { return /* binding */ loginUser; },\n/* harmony export */   registerUser: function() { return /* binding */ registerUser; }\n/* harmony export */ });\nlet apiUrlip = \"http://localhost:8080\";\nconst registerUser = async (data)=>{\n    const apiUrl = \"\".concat(apiUrlip, \"/travel/register\");\n    console.log(\"the url is\", apiUrl);\n    try {\n        console.log(\"getting in here\");\n        const response = await fetch(apiUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        if (!response.ok) {\n            console.log(\"error while calling the api\", response);\n        }\n        console.log(\"show me the response!!\", response);\n        const responseData = await response.json();\n        console.log(\"show me the response.status\", response.status);\n        if (response.status === 200 || response.status === 201) {\n            return {\n                success: true,\n                data: responseData\n            };\n        } else {\n            console.log(\"Registration failed:\", responseData.message);\n            return {\n                success: false,\n                error: responseData.message || \"Registration failed\"\n            };\n        }\n    } catch (error) {\n        console.error(\"There was a problem with the fetch operation:\", error);\n        throw new Error(error.message);\n    }\n};\nconst loginUser = async (data)=>{\n    const apiUrl = \"\".concat(apiUrlip, \"/travel/login\");\n    try {\n        const response = await fetch(apiUrl, {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(data)\n        });\n        const responseData = await response.json();\n        if (response.status === 200) {\n            return {\n                success: true,\n                message: responseData\n            };\n        } else {\n            return {\n                success: false,\n                error: responseData.message || \"Unknown error occurred\"\n            };\n        }\n    } catch (error) {\n        console.error(\"There was a problem with the fetch operation:\", error);\n        throw new Error(\"Network error\");\n    }\n};\nconst logOutUser = async (access_token)=>{\n    const apiUrl = \"\".concat(apiUrlip, \"/logout\");\n    console.log(\"show me the access token\", access_token);\n    try {\n        const response = await fetch(apiUrl, {\n            method: \"DELETE\",\n            headers: {\n                \"Content-Type\": \"application/json\",\n                Authorization: \"Bearer \".concat(access_token)\n            }\n        });\n        if (!response.ok) {\n            throw new Error(\"Logout failed\");\n        }\n        let data = await response.json();\n        console.log(\"data\", data);\n        if (data.status === 200) {\n            return {\n                success: true\n            };\n        } else {\n            return {\n                success: false,\n                error: \"Logout failed\"\n            };\n        }\n    } catch (error) {\n        console.error(\"There was a problem with the fetch operation:\", error);\n        throw new Error(\"Network error\");\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NlcnZpY2VzL3VzZXJTZXJ2aWNlLnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQVlBLElBQUlBLFdBQVdDLHVCQUF1QztBQUUvQyxNQUFNRyxlQUFlLE9BQU9DO0lBQ2pDLE1BQU1DLFNBQVMsR0FBWSxPQUFUTixVQUFTO0lBQzNCTyxRQUFRQyxHQUFHLENBQUMsY0FBY0Y7SUFFMUIsSUFBSTtRQUNGQyxRQUFRQyxHQUFHLENBQUM7UUFDWixNQUFNQyxXQUFXLE1BQU1DLE1BQU1KLFFBQVE7WUFDbkNLLFFBQVE7WUFDUkMsU0FBUztnQkFDUCxnQkFBZ0I7WUFDbEI7WUFDQUMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDVjtRQUN2QjtRQUdBLElBQUksQ0FBQ0ksU0FBU08sRUFBRSxFQUFDO1lBQ2ZULFFBQVFDLEdBQUcsQ0FBQywrQkFBK0JDO1FBQzdDO1FBRUFGLFFBQVFDLEdBQUcsQ0FBQywwQkFBMEJDO1FBQ3RDLE1BQU1RLGVBQWUsTUFBTVIsU0FBU1MsSUFBSTtRQUN4Q1gsUUFBUUMsR0FBRyxDQUFDLCtCQUErQkMsU0FBU1UsTUFBTTtRQUUxRCxJQUFJVixTQUFTVSxNQUFNLEtBQUssT0FBT1YsU0FBU1UsTUFBTSxLQUFLLEtBQUs7WUFDdEQsT0FBTztnQkFBRUMsU0FBUztnQkFBTWYsTUFBTVk7WUFBYTtRQUM3QyxPQUFPO1lBQ0xWLFFBQVFDLEdBQUcsQ0FBQyx3QkFBd0JTLGFBQWFJLE9BQU87WUFDeEQsT0FBTztnQkFDTEQsU0FBUztnQkFDVEUsT0FBT0wsYUFBYUksT0FBTyxJQUFJO1lBQ2pDO1FBQ0Y7SUFDRixFQUFFLE9BQU9DLE9BQVk7UUFDbkJmLFFBQVFlLEtBQUssQ0FBQyxpREFBaURBO1FBQy9ELE1BQU0sSUFBSUMsTUFBTUQsTUFBTUQsT0FBTztJQUMvQjtBQUNGLEVBQUU7QUFFSyxNQUFNRyxZQUFZLE9BQU9uQjtJQUM5QixNQUFNQyxTQUFTLEdBQVksT0FBVE4sVUFBUztJQUUzQixJQUFJO1FBQ0YsTUFBTVMsV0FBVyxNQUFNQyxNQUFNSixRQUFRO1lBQ25DSyxRQUFRO1lBQ1JDLFNBQVM7Z0JBQ1AsZ0JBQWdCO1lBQ2xCO1lBQ0FDLE1BQU1DLEtBQUtDLFNBQVMsQ0FBQ1Y7UUFDdkI7UUFDQSxNQUFNWSxlQUFlLE1BQU1SLFNBQVNTLElBQUk7UUFDeEMsSUFBSVQsU0FBU1UsTUFBTSxLQUFLLEtBQUs7WUFDM0IsT0FBTztnQkFBRUMsU0FBUztnQkFBTUMsU0FBU0o7WUFBYTtRQUNoRCxPQUFPO1lBQ0wsT0FBTztnQkFDTEcsU0FBUztnQkFDVEUsT0FBT0wsYUFBYUksT0FBTyxJQUFJO1lBQ2pDO1FBQ0Y7SUFDRixFQUFFLE9BQU9DLE9BQU87UUFDZGYsUUFBUWUsS0FBSyxDQUFDLGlEQUFpREE7UUFDL0QsTUFBTSxJQUFJQyxNQUFNO0lBQ2xCO0FBQ0YsRUFBRTtBQUVLLE1BQU1FLGFBQWEsT0FBT0M7SUFDL0IsTUFBTXBCLFNBQVMsR0FBWSxPQUFUTixVQUFTO0lBQzNCTyxRQUFRQyxHQUFHLENBQUMsNEJBQTRCa0I7SUFFeEMsSUFBSTtRQUNGLE1BQU1qQixXQUFXLE1BQU1DLE1BQU1KLFFBQVE7WUFDbkNLLFFBQVE7WUFDUkMsU0FBUztnQkFDUCxnQkFBZ0I7Z0JBQ2hCZSxlQUFlLFVBQXVCLE9BQWJEO1lBQzNCO1FBQ0Y7UUFFQSxJQUFJLENBQUNqQixTQUFTTyxFQUFFLEVBQUU7WUFDaEIsTUFBTSxJQUFJTyxNQUFNO1FBQ2xCO1FBRUEsSUFBSWxCLE9BQU8sTUFBTUksU0FBU1MsSUFBSTtRQUM5QlgsUUFBUUMsR0FBRyxDQUFDLFFBQVFIO1FBRXBCLElBQUlBLEtBQUtjLE1BQU0sS0FBSyxLQUFLO1lBQ3ZCLE9BQU87Z0JBQUVDLFNBQVM7WUFBSztRQUN6QixPQUFPO1lBQ0wsT0FBTztnQkFBRUEsU0FBUztnQkFBT0UsT0FBTztZQUFnQjtRQUNsRDtJQUNGLEVBQUUsT0FBT0EsT0FBTztRQUNkZixRQUFRZSxLQUFLLENBQUMsaURBQWlEQTtRQUMvRCxNQUFNLElBQUlDLE1BQU07SUFDbEI7QUFDRixFQUFFIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vX05fRS8uL3NlcnZpY2VzL3VzZXJTZXJ2aWNlLnRzPzdjODUiXSwic291cmNlc0NvbnRlbnQiOlsiaW50ZXJmYWNlIFJlZ2lzdGVyRGF0YSB7XHJcbiAgZW1haWw6IHN0cmluZztcclxuICBwYXNzd29yZDogc3RyaW5nO1xyXG4gIHJlcGVhdFBhc3N3b3JkOiBzdHJpbmc7XHJcbiAgcm9sZTogc3RyaW5nO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgTG9naW5EYXRhIHtcclxuICBlbWFpbDogc3RyaW5nO1xyXG4gIHBhc3N3b3JkOiBzdHJpbmc7XHJcbn1cclxuXHJcbmxldCBhcGlVcmxpcCA9IHByb2Nlc3MuZW52Lk5FWFRfUFVCTElDX1RSQVZFTF9TRUNVUklUWTtcclxuXHJcbmV4cG9ydCBjb25zdCByZWdpc3RlclVzZXIgPSBhc3luYyAoZGF0YTogUmVnaXN0ZXJEYXRhKTogUHJvbWlzZTxhbnk+ID0+IHtcclxuICBjb25zdCBhcGlVcmwgPSBgJHthcGlVcmxpcH0vdHJhdmVsL3JlZ2lzdGVyYDtcclxuICBjb25zb2xlLmxvZygndGhlIHVybCBpcycsIGFwaVVybCk7XHJcblxyXG4gIHRyeSB7XHJcbiAgICBjb25zb2xlLmxvZygnZ2V0dGluZyBpbiBoZXJlJylcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpVXJsLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBoZWFkZXJzOiB7XHJcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcclxuICAgICAgfSxcclxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoZGF0YSksXHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgaWYgKCFyZXNwb25zZS5vayl7XHJcbiAgICAgIGNvbnNvbGUubG9nKCdlcnJvciB3aGlsZSBjYWxsaW5nIHRoZSBhcGknLCByZXNwb25zZSk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc29sZS5sb2coJ3Nob3cgbWUgdGhlIHJlc3BvbnNlISEnLCByZXNwb25zZSk7XHJcbiAgICBjb25zdCByZXNwb25zZURhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICBjb25zb2xlLmxvZygnc2hvdyBtZSB0aGUgcmVzcG9uc2Uuc3RhdHVzJywgcmVzcG9uc2Uuc3RhdHVzKTtcclxuXHJcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSAyMDAgfHwgcmVzcG9uc2Uuc3RhdHVzID09PSAyMDEpIHtcclxuICAgICAgcmV0dXJuIHsgc3VjY2VzczogdHJ1ZSwgZGF0YTogcmVzcG9uc2VEYXRhIH07XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zb2xlLmxvZygnUmVnaXN0cmF0aW9uIGZhaWxlZDonLCByZXNwb25zZURhdGEubWVzc2FnZSk7XHJcbiAgICAgIHJldHVybiB7XHJcbiAgICAgICAgc3VjY2VzczogZmFsc2UsXHJcbiAgICAgICAgZXJyb3I6IHJlc3BvbnNlRGF0YS5tZXNzYWdlIHx8ICdSZWdpc3RyYXRpb24gZmFpbGVkJyxcclxuICAgICAgfTtcclxuICAgIH1cclxuICB9IGNhdGNoIChlcnJvcjogYW55KSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdUaGVyZSB3YXMgYSBwcm9ibGVtIHdpdGggdGhlIGZldGNoIG9wZXJhdGlvbjonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IubWVzc2FnZSk7XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IGxvZ2luVXNlciA9IGFzeW5jIChkYXRhOiBMb2dpbkRhdGEpOiBQcm9taXNlPGFueT4gPT4ge1xyXG4gIGNvbnN0IGFwaVVybCA9IGAke2FwaVVybGlwfS90cmF2ZWwvbG9naW5gO1xyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChhcGlVcmwsIHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKSxcclxuICAgIH0pO1xyXG4gICAgY29uc3QgcmVzcG9uc2VEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUsIG1lc3NhZ2U6IHJlc3BvbnNlRGF0YSB9O1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICBzdWNjZXNzOiBmYWxzZSxcclxuICAgICAgICBlcnJvcjogcmVzcG9uc2VEYXRhLm1lc3NhZ2UgfHwgJ1Vua25vd24gZXJyb3Igb2NjdXJyZWQnLFxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gIH0gY2F0Y2ggKGVycm9yKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCdUaGVyZSB3YXMgYSBwcm9ibGVtIHdpdGggdGhlIGZldGNoIG9wZXJhdGlvbjonLCBlcnJvcik7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ05ldHdvcmsgZXJyb3InKTtcclxuICB9XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgbG9nT3V0VXNlciA9IGFzeW5jIChhY2Nlc3NfdG9rZW4pID0+IHtcclxuICBjb25zdCBhcGlVcmwgPSBgJHthcGlVcmxpcH0vbG9nb3V0YDtcclxuICBjb25zb2xlLmxvZygnc2hvdyBtZSB0aGUgYWNjZXNzIHRva2VuJywgYWNjZXNzX3Rva2VuKTtcclxuXHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpVXJsLCB7XHJcbiAgICAgIG1ldGhvZDogJ0RFTEVURScsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICAgIEF1dGhvcml6YXRpb246IGBCZWFyZXIgJHthY2Nlc3NfdG9rZW59YCxcclxuICAgICAgfSxcclxuICAgIH0pO1xyXG5cclxuICAgIGlmICghcmVzcG9uc2Uub2spIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMb2dvdXQgZmFpbGVkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XHJcbiAgICBjb25zb2xlLmxvZygnZGF0YScsIGRhdGEpO1xyXG5cclxuICAgIGlmIChkYXRhLnN0YXR1cyA9PT0gMjAwKSB7XHJcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IHRydWUgfTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiB7IHN1Y2Nlc3M6IGZhbHNlLCBlcnJvcjogJ0xvZ291dCBmYWlsZWQnIH07XHJcbiAgICB9XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ1RoZXJlIHdhcyBhIHByb2JsZW0gd2l0aCB0aGUgZmV0Y2ggb3BlcmF0aW9uOicsIGVycm9yKTtcclxuICAgIHRocm93IG5ldyBFcnJvcignTmV0d29yayBlcnJvcicpO1xyXG4gIH1cclxufTsiXSwibmFtZXMiOlsiYXBpVXJsaXAiLCJwcm9jZXNzIiwiZW52IiwiTkVYVF9QVUJMSUNfVFJBVkVMX1NFQ1VSSVRZIiwicmVnaXN0ZXJVc2VyIiwiZGF0YSIsImFwaVVybCIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwib2siLCJyZXNwb25zZURhdGEiLCJqc29uIiwic3RhdHVzIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJlcnJvciIsIkVycm9yIiwibG9naW5Vc2VyIiwibG9nT3V0VXNlciIsImFjY2Vzc190b2tlbiIsIkF1dGhvcml6YXRpb24iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/userService.ts\n"));

/***/ })

});